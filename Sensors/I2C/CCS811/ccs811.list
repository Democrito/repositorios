DD // Temporizador [Máximo valor para el temporizador es 'hFE (254); Nunca poner 'hFF como máximo valor.]
FE // cantidad de tiempo en ms * 10 [Recuerda poner los valores siempre en hexadecimal.]
CC // Cantidad de bytes para leer
00 // = 'h00
FF // Cantidad de bytes para escribir
06 // = 'h06
B4 // dirección i2c (Para el hardware es otro dato [byte] más)  B4 = escritura; B5 = Lectura. En este caso es escritura.
FF // dato
11 // dato
E5 // dato
72 // dato
8A // dato
DD // Temporizador <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
0F // 150 ms
CC // Cantidad de bytes para leer
00 // = 'h00
FF // Cantidad de bytes para escribir
02 // = 'h02
B4 // dirección i2c
20 // dato
CC // Cantidad de datos para leer.
01 // = 'h01
FF // Cantidad de datos para escribir.
01 // = 'h01
B5 // dirección i2c
00 // dato leído a través del I2C. "00" es arbitrario.
CC // Cargo un registro con doble función con el valor:
81 // = 'h81
BB // Salta a la dirección 'h0C si el valor leído con anterioridad en el I2C no vale 'h81
0C // dirección de memoria a la que salta si la condición "no igual" se cumple.
CC // Cantidad de datos para leer
00 // = 'h00
FF // Cantidad de datos para escribir
02 // = 'h02
B4 // dirección i2c
F4 // dato
DD // Temporizador <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
0F // 150 ms
CC // Cantidad de datos para leer
00 // = 'h00
FF // Cantidad de datos para escribir
02 // = 'h02
B4 // dirección i2c
00 // dato
CC // Cantidad de datos para leer
01 // = 'h01
FF // Cantidad de datos para escribir
01 // = 'h01
B5 // dirección i2c
00 // dato leído a través del I2C. "00" es arbitrario.
CC // Cargo un registro con doble función con el valor:
90 // = 'h90
BB // salta a la dirección 'h24 si el valor leído con anterioridad en el I2C no vale 'h90
24 // dirección de memoria a la que salta.
CC // cantidad de datos para leer
00 // = 'h00
FF // cantidad de datos para escribir
03 // = 'h03
B4 // direccion i2c
01 // dato
00 // dato
CC // cantidad de datos para leer
00 // = 'h00
FF // cantidad de datos para escribir
03 // = 'h03
B4 // dirección i2c
01 // dato
20 // dato
DD // Temporizador <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
FE // 2.54s
DD // Temporizador
FE // 2.54s
CC // Cantidad de datos para leer
00 // = 'h00
FF // Cantidad de datos para escribir
02 // = 'h02
B4 // dirección i2c
00 // dato
CC // Cantidad de datos para leer
01 // = 'h01
FF // Cantidad de datos para escribir
01 // = 'h01
B5 // dirección i2c
00 // dato leído a través del I2C. "00" es arbitrario.
CC // Cargo un registro con doble función con el valor
98 // = 'h98
BB // Salta a la dirección 'h44 si el valor leído con anterioridad en el I2C no vale 'h98
44 // dirección de memoria a la que salta.
DD // Temporizador
0F // 150 ms
CC // Cantidad de datos para leer
00 // = 'h00
FF // cantidad de datos para escribir
02 // = 'h02
B4 // dirección i2c
00 // dato
CC // Cantidad de datos para leer
01 // = 'h01
FF // Cantidad de datos para escribir
01 // = 'h01
B5 // dirección i2c
00 // dato leído a través del I2C. "00" es arbitrario.
CC // Cargo un registro con doble función con el valor:
98 // = 'h98
BB // Salta a la dirección 'h44 si el valor leído con anterioridad en el I2C no vale 'h98
44 // dirección de memoria a la que salta.
CC // Cantidad de datos para leer
00 // = 'h00
FF // Cantidad de datos para escribir
02 // = 'h02
B4 // dirección i2c
02 // dato
DA // Cargo un registro externo con el valor:
FF // = 255
CC // Cantidad de datos para leer
08 // = 'h08
FF // Cantidad de datos para escribir
01 // = 'h01
B5 // dirección i2c
00 // dato leído a través del I2C. "00" es arbitrario.
00 // dato leído a través del I2C. "00" es arbitrario.
00 // dato leído a través del I2C. "00" es arbitrario.
00 // dato leído a través del I2C. "00" es arbitrario.
00 // dato leído a través del I2C. "00" es arbitrario.
00 // dato leído a través del I2C. "00" es arbitrario.
00 // dato leído a través del I2C. "00" es arbitrario.
00 // dato leído a través del I2C. "00" es arbitrario.
DA // Cargo un registro externo con el valor:
00 // = 'h00 Producirá un flanco de bajada fuera del circuito y se quedará memorizado los datos obtenidos.
AA // Ir a la dirección 'h44 de la memoria
44 // dirección de memoria a la que salta.